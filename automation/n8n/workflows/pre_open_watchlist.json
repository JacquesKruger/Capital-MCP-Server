{
  "name": "Pre-Open Watchlist",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 6 * * 1-5"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Cron Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [300, 300]
    },
    {
      "parameters": {
        "url": "http://mcp-caller:8000/screener",
        "method": "POST"
      },
      "id": "run-screener",
      "name": "Run Screener",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [500, 300]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  if (data.watchlist) {\n    results.push({\n      json: {\n        day: data.day,\n        generated_at: data.generated_at,\n        watchlist: data.watchlist,\n        total_symbols: Object.values(data.watchlist).reduce((sum, arr) => sum + arr.length, 0)\n      }\n    });\n  }\n}\n\nreturn results.length > 0 ? results : [{ json: { error: 'No watchlist data' } }];"
      },
      "id": "parse-watchlist",
      "name": "Parse Watchlist",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 300]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  // Always generate a message, even if no watchlist data\n  let message = '';\n  \n  if (!data.watchlist) {\n    // No watchlist data at all\n    message = '‚ö†Ô∏è *Watchlist Generation Failed*\\n\\n';\n    message += 'The screener did not return valid data.\\n';\n    message += '_Check the mcp-caller logs for errors._';\n  } else {\n    // Format for Telegram\n    message = `üìä *Daily Watchlist* - ${data.day}\\n`;\n    message += `Generated: ${new Date(data.generated_at).toLocaleTimeString()}\\n`;\n    message += `Total symbols: ${data.total_symbols || 0}\\n\\n`;\n    \n    // Check if watchlist is empty\n    if (!data.total_symbols || data.total_symbols === 0) {\n      message += `‚ö†Ô∏è No symbols qualified today.\\n\\n`;\n      message += `This can happen when:\\n`;\n      message += `‚Ä¢ Insufficient candle data (need 50+ bars)\\n`;\n      message += `‚Ä¢ All symbols filtered out by thresholds\\n`;\n      message += `‚Ä¢ Market conditions are unusual\\n\\n`;\n      message += `_Run the data collection workflow first to populate candle data._`;\n    } else {\n      // Normal watchlist formatting\n      for (const [assetClass, symbols] of Object.entries(data.watchlist)) {\n        if (!symbols || symbols.length === 0) {\n          continue;\n        }\n        \n        message += `*${assetClass.toUpperCase()}*\\n`;\n        \n        for (let i = 0; i < Math.min(symbols.length, 10); i++) {\n          const s = symbols[i];\n          const reasons = s.reasons && s.reasons.length > 0 ? s.reasons.join(', ') : 'qualified';\n          message += `${i + 1}. \\`${s.symbol}\\` (${s.score.toFixed(2)})\\n`;\n          message += `   ${reasons}\\n`;\n          \n          if (s.atr_pct !== undefined && s.gap_pct !== undefined) {\n            message += `   ATR: ${s.atr_pct.toFixed(2)}% | Gap: ${s.gap_pct >= 0 ? '+' : ''}${s.gap_pct.toFixed(2)}%\\n`;\n          }\n        }\n        \n        message += '\\n';\n      }\n      \n      message += '_Use these for strategy selection and position sizing._';\n    }\n  }\n  \n  results.push({\n    json: {\n      ...data,\n      telegram_message: message\n    }\n  });\n}\n\n// Ensure we always return at least one item\nif (results.length === 0) {\n  results.push({\n    json: {\n      telegram_message: '‚ö†Ô∏è *Watchlist Workflow Error*\\n\\nNo data was processed. Check the workflow configuration.'\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "format-telegram",
      "name": "Format Telegram Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "={{ 'https://api.telegram.org/bot' + $env.TELEGRAM_BOT_TOKEN + '/sendMessage' }}",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { chat_id: $env.TELEGRAM_CHAT_ID, text: $json.telegram_message } }}"
      },
      "id": "send-telegram",
      "name": "Send Telegram Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO system_events (event_type, severity, message, details, source, occurred_at) VALUES ('WATCHLIST_GENERATED', 'INFO', 'Daily watchlist generated and published', '{{ JSON.stringify({ day: $json.day, total_symbols: $json.total_symbols }) }}', 'pre_open_watchlist_workflow', NOW())"
      },
      "id": "log-completion",
      "name": "Log Completion",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1300, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Trading Database"
        }
      },
      "alwaysOutputData": true,
      "continueOnFail": true
    }
  ],
  "connections": {
    "cron-trigger": {
      "main": [
        [
          {
            "node": "run-screener",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "run-screener": {
      "main": [
        [
          {
            "node": "parse-watchlist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse-watchlist": {
      "main": [
        [
          {
            "node": "format-telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format-telegram": {
      "main": [
        [
          {
            "node": "send-telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-telegram": {
      "main": [
        [
          {
            "node": "log-completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-08T00:00:00.000Z",
  "versionId": "1"
}

